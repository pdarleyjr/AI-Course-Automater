services:
  # Existing services
  hello:
    image: 'hello-world'
    restart: "no"
  
  app:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
  
  # Skyvern services
  postgres:
    image: postgres:14-alpine
    restart: always
    # comment out if you want to externally connect DB
    # ports:
    #   - 5432:5432
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_USER=skyvern
      - POSTGRES_PASSWORD=skyvern
      - POSTGRES_POSTGRES_DB=skyvern
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skyvern"]
      interval: 5s
      timeout: 5s
      retries: 5

  skyvern:
    image: public.ecr.aws/skyvern/skyvern:latest
    restart: on-failure
    # comment out if you want to externally call skyvern API
    ports:
      - 8000:8000
    volumes:
      - ./artifacts:/data/artifacts
      - ./videos:/data/videos
      - ./har:/data/har
      - ./log:/data/log
      - ./.streamlit:/app/.streamlit
    environment:
      - DATABASE_STRING=postgresql+psycopg://skyvern:skyvern@postgres:5432/skyvern
      - BROWSER_TYPE=chromium-headful
      - ENABLE_OPENAI=true
      - LLM_KEY=OPENAI_GPT4O
      - OPENAI_API_KEY=<your_openai_key>
      # If you want to use other LLM provider, like azure and anthropic:
      # - ENABLE_ANTHROPIC=true
      # - LLM_KEY=ANTHROPIC_CLAUDE3.5_SONNET
      # - ANTHROPIC_API_KEY=<your_anthropic_key>
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "test", "-f", "/app/.streamlit/secrets.toml"]
      interval: 5s
      timeout: 5s
      retries: 5

  skyvern-ui:
    image: public.ecr.aws/skyvern/skyvern-ui:latest
    restart: on-failure
    ports:
      - 8080:8080
      - 9090:9090
    volumes:
      - ./artifacts:/data/artifacts
      - ./videos:/data/videos
      - ./har:/data/har
      - ./.streamlit:/app/.streamlit
    environment:
      - VITE_WSS_BASE_URL=ws://localhost:8000/api/v1
    depends_on:
      skyvern:
        condition: service_healthy

  # Playwright automation service
  playwright:
    image: mcr.microsoft.com/playwright:v1.42.1-focal
    restart: unless-stopped
    volumes:
      - ./src:/app
      - ./artifacts:/app/artifacts
      - ./videos:/app/videos
      - ./har:/app/har
      - ./log:/app/log
    working_dir: /app
    environment:
      - NODE_ENV=development
      - PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
      - SKYVERN_API_URL=http://skyvern:8000
      - SKYVERN_UI_URL=http://skyvern-ui:8080
    depends_on:
      skyvern:
        condition: service_healthy
      skyvern-ui:
        condition: service_started
    command: tail -f /dev/null  # Keep container running

  # LangChain AI service
  langchain-js:
    image: mcr.microsoft.com/playwright:v1.42.1-focal
  # Using Playwright image as base for Node.js
    restart: unless-stopped
    volumes:
      - ./src:/app
      - ./artifacts:/app/artifacts
      - ./log:/app/log
    working_dir: /app
    environment:
      - NODE_ENV=development
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key}
      - SKYVERN_API_URL=http://skyvern:8000
      - SKYVERN_UI_URL=http://skyvern-ui:8080
    depends_on:
      skyvern:
        condition: service_healthy
    command: bash -c "cd /app && npm install && tail -f /dev/null"  # Install dependencies and keep container running

  # LangChain Python service
  langchain-py:
    image: python:3.10-slim
    restart: unless-stopped
    volumes:
      - ./src:/app
      - ./artifacts:/app/artifacts
      - ./log:/app/log
    working_dir: /app
    environment:
      - PYTHONUNBUFFERED=1
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key}
      - SKYVERN_API_URL=http://skyvern:8000
      - SKYVERN_UI_URL=http://skyvern-ui:8080
    depends_on:
      skyvern:
        condition: service_healthy
    # Install Python dependencies and keep container running
    command: bash -c "pip install -U langchain langchain-openai && tail -f /dev/null"